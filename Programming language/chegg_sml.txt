You are to submit code in SML as .sml files, with solutions to each exercise, which consist of providing implementations, in SML, to the following functions:

factor(x,y) : boolean - returns true if x is a factor of y.

prime(x) : boolean - returns true if x is prime.

gcd(x,y) : int - computes the greatest common divisor for x and y.

perfect(x) : boolean - returns true if x is a perfect number.

amicable(x,y) : boolean - returns true if x and y are amicable numbers.

occr(nums,x) : int - returns the number of times that x occurs in nums (which is an array (Ruby) or a list (SML)).

primes(nums) : list or array of int - returns a list (or array) with prime numbers contained in nums.

primeFactors(x) : list or array of int - returns a list (or array) containing the prime factors of x.

  */

/*

factor(x,y) : boolean - returns true if x is a factor of y.

*/

fun factor(x,y) =
   if (y mod x = 0) then true
   else false;
    
/*

prime(x) : boolean - returns true if x is prime.

*/

fun prime(x) = 
   if (x <= 1) then false
   else 
        let 
            fun helper (i) = 
               if (i * i > x) then true
               else if (x mod i = 0) then false
               else helper (i+1)
        in
            helper(2)
        end;
        
/*

gcd(x,y) : int - computes the greatest common divisor for x and y.

*/

fun gcd(x,y) = 
   if (x > y) then gcd(y,x)
   else if (y mod x = 0) then x
   else gcd(y mod x, x);
   
/*

perfect(x) : boolean - returns true if x is a perfect number.

*/

fun perfect (x) =
   let
       val upperBound = x div 2
       fun helper (i, sum) =
           if (i > upperBound) then
               if (sum = x) then true
               else false
           else if (x mod i = 0) then helper (i+1, sum+i)
           else helper (i+1, sum)
   in
       helper (1, 0)
   end;
   
/*

amicable(x,y) : boolean - returns true if x and y are amicable numbers.

*/

fun amicable(x,y) =
   let
   
       fun helper1 (x, sum) =
           if (x = 0) then sum
           else helper1 (x-1, sum + (x div y))
       
       fun helper2 (y, sum) =
           if (y = 0) then sum
           else helper2 (y-1, sum + (y div x))
   in
       (helper1(x-1, 0) = y) andalso (helper2(y-1, 0) = x)
   end;
   
/*

occr(nums,x) : int - returns the number of times that x occurs in nums (which is an array (Ruby) or a list (SML)).

*/

fun occr(nil, _) = 0
 | occr(h::t, x) =
       if (h = x) then 1 + occr(t, x)
       else occr(t, x);
       
/*

primes(nums) : list or array of int - returns a list (or array) with prime numbers contained in nums.

*/

fun primes(nil) = nil
 | primes(h::t) =
       if (prime(h)) then h::primes(t)
       else primes(t);
       
/*

primeFactors(x) : list or array of int - returns a list (or array) containing the prime factors of x.

*/

fun primeFactors(x) =
   let
       val upperBound = x div 2
       fun helper (i, sum) =
           if (i > upperBound) then if (prime(x)) then x::sum
           else if (x mod i = 0) then helper (i+1, i::sum)
           else helper (i+1, sum)
   in
       helper (2, [])
   end;